{"version":3,"sources":["containers/simple-barchart-container.tsx"],"names":[],"mappings":"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","file":"containers/simple-barchart-container.js","sourcesContent":["import * as React from \"react\";\r\nimport { RestDao } from \"SPScript\";\r\nimport * as d3 from 'd3';\r\nimport SimpleBarchart from \"../views/Simple-Barchart\";\r\n\r\nclass SimpleBarchartContainer extends React.Component<any, any> {\r\n\r\n    //NOTE - React-router parsing by TypeScript fails if an isRequired property is defined!! \r\n    //static propTypes = { listName: React.PropTypes.string.isRequired };\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n\r\n        const dao = new RestDao(_spPageContextInfo.webAbsoluteUrl);\r\n        const dataList = dao.lists(\"TestData\"); //this.props.listName);\r\n        dataList.getItems().then(this.processResults);\r\n    }\r\n\r\n    processResults(data) {\r\n        if (data && data.d && data.d.results) {\r\n            //alert(data.d.results.length + ' data entries returned');\r\n        } else if (data && data.length > 0) {\r\n            //alert(data.length + ' items returned');\r\n            data.map( (item, i, arr) => { console.log(`Item ${i} has title ${item.Title}`); } )\r\n\r\n            //const chartdata = [2.13, 4, 5.23, 1.234, 9.9, 11.1, 13, 2.5, 1.1, 6.6, 10, 3];\r\n            let chartdata =  data.map( (item) => { return item.ANumber as Number; } )\r\n            this.firstD3Test(chartdata);\r\n        }\r\n        //console.log(JSON.stringify(data));\r\n    }\r\n\r\n    firstD3Test(data) {\r\n        const size = {\r\n            width: 500,\r\n            height:200,\r\n            barPadding:2\r\n        };\r\n        let svg = d3.select(\"#chart\")\r\n            .append(\"svg\")\r\n            .attr(\"id\", \"testbarchart\")\r\n            .attr(\"height\", size.height)\r\n            .attr(\"width\", size.width);\r\n        svg.selectAll('rect')\r\n            .data(data)\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", function (d, i) { return i * (size.width / data.length); })\r\n            .attr(\"y\", function (d:number) { return size.height - ((d / d3.max(data)) * size.height); } )\r\n            .attr(\"width\", function () { return (size.width / data.length) - size.barPadding; })\r\n            .attr(\"height\", function (d:number) { return (d / d3.max(data)) * size.height; })\r\n            .style(\"fill\", function (d:number) { return \"rgb(0, \" + (d * 20) + \",0)\"; });    \r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <SimpleBarchart />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SimpleBarchartContainer;\r\n"],"sourceRoot":"/source/"}